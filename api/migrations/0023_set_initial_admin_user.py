# Generated by Django 5.0.2 on 2025-10-18 18:48

from django.conf import settings
from django.contrib.auth.hashers import make_password
from django.db import migrations

DEFAULT_ADMIN_EMAIL = "admin@matchmatical.com"
DEFAULT_ADMIN_PASSWORD = "admin#1234#"


def _normalized_admin_emails():
    configured = {
        email.strip().lower()
        for email in getattr(settings, "ADMIN_EMAILS", [])
        if isinstance(email, str) and email.strip()
    }
    configured.add(DEFAULT_ADMIN_EMAIL)
    return {email for email in configured if email}


def create_initial_admin(apps, schema_editor):
    User = apps.get_model("api", "User")

    for email in _normalized_admin_emails():
        user = User.objects.filter(email__iexact=email).first()
        if user:
            fields_to_update = []
            if not getattr(user, "is_admin", False):
                user.is_admin = True
                fields_to_update.append("is_admin")
            if not getattr(user, "is_staff", False):
                user.is_staff = True
                fields_to_update.append("is_staff")
            if not getattr(user, "is_superuser", False):
                user.is_superuser = True
                fields_to_update.append("is_superuser")
            if fields_to_update:
                user.save(update_fields=fields_to_update)
            continue

        base_username = email.split("@")[0] or "admin"
        username = base_username
        suffix = 1
        while User.objects.filter(username=username).exists():
            username = f"{base_username}{suffix}"
            suffix += 1

        User.objects.create(
            email=email,
            username=username,
            is_active=True,
            is_staff=True,
            is_superuser=True,
            is_admin=True,
            password=make_password(DEFAULT_ADMIN_PASSWORD),
            first_name="Admin",
        )


def rollback_initial_admin(apps, schema_editor):
    User = apps.get_model("api", "User")
    for email in _normalized_admin_emails():
        user = User.objects.filter(email__iexact=email).first()
        if not user:
            continue

        fields_to_update = []
        if getattr(user, "is_admin", False):
            user.is_admin = False
            fields_to_update.append("is_admin")
        if fields_to_update:
            user.save(update_fields=fields_to_update)


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0022_user_is_admin"),
    ]

    operations = [
        migrations.RunPython(create_initial_admin, rollback_initial_admin),
    ]
